
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BIN_OP COMMA ELSE FACTOR FUNCTION IDENT IF L_BRACE L_BRACKET MINUS MUL_OP NOT NUMBER OR PLUS RETURN R_BRACE R_BRACKET SEPARATOR WHILE\n        programm : function\n                 | function programm\n    \n        function : FUNCTION signature L_BRACE body R_BRACE\n    \n        signature : IDENT L_BRACKET argumentList R_BRACKET\n    \n    body : infinstruction \n\n         \n    \n    argumentList : IDENT\n                 | IDENT COMMA argumentList\n                 | \n    \n    instruction : assigment \n                | return \n                | condition \n                | loop \n                |  \n                | assigment instruction\n                | return instruction\n                | condition instruction\n                | loop instruction\n    \n    infinstruction : infinstruction instruction \n                   | instruction\n    \n    assigment : IDENT ASSIGN arExpression\n    \n    return : RETURN arExpression\n    \n    condition : IF arExpression L_BRACE instruction R_BRACE\n              | IF arExpression L_BRACE instruction R_BRACE ELSE L_BRACE instruction R_BRACE\n    \n    loop : WHILE arExpression L_BRACE instruction R_BRACE \n    \n    arExpression : disjunct \n                 | disjunct OR arExpression\n    \n    disjunct : conjunct\n             | conjunct AND disjunct\n    \n    conjunct  : binaryExp\n              | binaryExp BIN_OP binaryExp\n    \n    binaryExp : expression\n              | NOT expression\n    \n    expression : term\n               | expression PLUS term\n               | expression MINUS term\n    \n    term : factor\n         | term MUL_OP factor\n    \n    factor : base\n           | MINUS factor\n           | base FACTOR factor\n    \n    base : NUMBER\n         | IDENT\n         | L_BRACKET arExpression R_BRACKET\n         | signature\n    '
    
_lr_action_items = {'FUNCTION':([0,2,22,],[3,3,-3,]),'$end':([1,2,4,22,],[0,-1,-2,-3,]),'IDENT':([3,7,8,10,11,12,13,14,15,17,18,19,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,62,63,64,65,66,67,68,71,72,74,76,],[6,16,20,16,-19,16,16,16,16,40,40,40,-18,-14,-15,-16,-17,40,-21,-25,-27,-29,-31,40,-33,40,-36,-38,-41,-42,40,-44,20,-4,-20,40,40,40,40,40,-32,40,-39,40,16,16,-26,-28,-30,-34,-35,-37,-40,-43,-22,-24,16,-23,]),'L_BRACE':([5,30,31,32,33,35,37,38,39,40,42,43,44,46,53,55,61,62,63,64,65,66,67,68,73,],[7,-25,-27,-29,-31,-33,-36,-38,-41,-42,-44,58,59,-4,-32,-39,-26,-28,-30,-34,-35,-37,-40,-43,74,]),'L_BRACKET':([6,17,18,19,28,34,36,40,41,48,49,50,51,52,54,56,],[8,41,41,41,41,41,41,8,41,41,41,41,41,41,41,41,]),'RETURN':([7,10,11,12,13,14,15,23,24,25,26,27,29,30,31,32,33,35,37,38,39,40,42,46,47,53,55,58,59,61,62,63,64,65,66,67,68,71,72,74,76,],[17,17,-19,17,17,17,17,-18,-14,-15,-16,-17,-21,-25,-27,-29,-31,-33,-36,-38,-41,-42,-44,-4,-20,-32,-39,17,17,-26,-28,-30,-34,-35,-37,-40,-43,-22,-24,17,-23,]),'IF':([7,10,11,12,13,14,15,23,24,25,26,27,29,30,31,32,33,35,37,38,39,40,42,46,47,53,55,58,59,61,62,63,64,65,66,67,68,71,72,74,76,],[18,18,-19,18,18,18,18,-18,-14,-15,-16,-17,-21,-25,-27,-29,-31,-33,-36,-38,-41,-42,-44,-4,-20,-32,-39,18,18,-26,-28,-30,-34,-35,-37,-40,-43,-22,-24,18,-23,]),'WHILE':([7,10,11,12,13,14,15,23,24,25,26,27,29,30,31,32,33,35,37,38,39,40,42,46,47,53,55,58,59,61,62,63,64,65,66,67,68,71,72,74,76,],[19,19,-19,19,19,19,19,-18,-14,-15,-16,-17,-21,-25,-27,-29,-31,-33,-36,-38,-41,-42,-44,-4,-20,-32,-39,19,19,-26,-28,-30,-34,-35,-37,-40,-43,-22,-24,19,-23,]),'R_BRACE':([7,9,10,11,12,13,14,15,23,24,25,26,27,29,30,31,32,33,35,37,38,39,40,42,46,47,53,55,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,],[-13,22,-5,-19,-9,-10,-11,-12,-18,-14,-15,-16,-17,-21,-25,-27,-29,-31,-33,-36,-38,-41,-42,-44,-4,-20,-32,-39,-13,-13,-26,-28,-30,-34,-35,-37,-40,-43,71,72,-22,-24,-13,76,-23,]),'R_BRACKET':([8,20,21,30,31,32,33,35,37,38,39,40,42,45,46,53,55,57,60,61,62,63,64,65,66,67,68,],[-8,-6,46,-25,-27,-29,-31,-33,-36,-38,-41,-42,-44,-8,-4,-32,-39,68,-7,-26,-28,-30,-34,-35,-37,-40,-43,]),'ASSIGN':([16,],[28,]),'NOT':([17,18,19,28,41,48,49,50,],[34,34,34,34,34,34,34,34,]),'MINUS':([17,18,19,28,33,34,35,36,37,38,39,40,41,42,46,48,49,50,51,52,53,54,55,56,64,65,66,67,68,],[36,36,36,36,52,36,-33,36,-36,-38,-41,-42,36,-44,-4,36,36,36,36,36,52,36,-39,36,-34,-35,-37,-40,-43,]),'NUMBER':([17,18,19,28,34,36,41,48,49,50,51,52,54,56,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'COMMA':([20,],[45,]),'OR':([30,31,32,33,35,37,38,39,40,42,46,53,55,62,63,64,65,66,67,68,],[48,-27,-29,-31,-33,-36,-38,-41,-42,-44,-4,-32,-39,-28,-30,-34,-35,-37,-40,-43,]),'AND':([31,32,33,35,37,38,39,40,42,46,53,55,63,64,65,66,67,68,],[49,-29,-31,-33,-36,-38,-41,-42,-44,-4,-32,-39,-30,-34,-35,-37,-40,-43,]),'BIN_OP':([32,33,35,37,38,39,40,42,46,53,55,64,65,66,67,68,],[50,-31,-33,-36,-38,-41,-42,-44,-4,-32,-39,-34,-35,-37,-40,-43,]),'PLUS':([33,35,37,38,39,40,42,46,53,55,64,65,66,67,68,],[51,-33,-36,-38,-41,-42,-44,-4,51,-39,-34,-35,-37,-40,-43,]),'MUL_OP':([35,37,38,39,40,42,46,55,64,65,66,67,68,],[54,-36,-38,-41,-42,-44,-4,-39,54,54,-37,-40,-43,]),'FACTOR':([38,39,40,42,46,68,],[56,-41,-42,-44,-4,-43,]),'ELSE':([71,],[73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programm':([0,2,],[1,4,]),'function':([0,2,],[2,2,]),'signature':([3,17,18,19,28,34,36,41,48,49,50,51,52,54,56,],[5,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'body':([7,],[9,]),'infinstruction':([7,],[10,]),'instruction':([7,10,12,13,14,15,58,59,74,],[11,23,24,25,26,27,69,70,75,]),'assigment':([7,10,12,13,14,15,58,59,74,],[12,12,12,12,12,12,12,12,12,]),'return':([7,10,12,13,14,15,58,59,74,],[13,13,13,13,13,13,13,13,13,]),'condition':([7,10,12,13,14,15,58,59,74,],[14,14,14,14,14,14,14,14,14,]),'loop':([7,10,12,13,14,15,58,59,74,],[15,15,15,15,15,15,15,15,15,]),'argumentList':([8,45,],[21,60,]),'arExpression':([17,18,19,28,41,48,],[29,43,44,47,57,61,]),'disjunct':([17,18,19,28,41,48,49,],[30,30,30,30,30,30,62,]),'conjunct':([17,18,19,28,41,48,49,],[31,31,31,31,31,31,31,]),'binaryExp':([17,18,19,28,41,48,49,50,],[32,32,32,32,32,32,32,63,]),'expression':([17,18,19,28,34,41,48,49,50,],[33,33,33,33,53,33,33,33,33,]),'term':([17,18,19,28,34,41,48,49,50,51,52,],[35,35,35,35,35,35,35,35,35,64,65,]),'factor':([17,18,19,28,34,36,41,48,49,50,51,52,54,56,],[37,37,37,37,37,55,37,37,37,37,37,37,66,67,]),'base':([17,18,19,28,34,36,41,48,49,50,51,52,54,56,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programm","S'",1,None,None,None),
  ('programm -> function','programm',1,'p_programm','lexer.py',108),
  ('programm -> function programm','programm',2,'p_programm','lexer.py',109),
  ('function -> FUNCTION signature L_BRACE body R_BRACE','function',5,'p_function','lexer.py',117),
  ('signature -> IDENT L_BRACKET argumentList R_BRACKET','signature',4,'p_signature','lexer.py',123),
  ('body -> infinstruction','body',1,'p_body','lexer.py',129),
  ('argumentList -> IDENT','argumentList',1,'p_argumentList','lexer.py',142),
  ('argumentList -> IDENT COMMA argumentList','argumentList',3,'p_argumentList','lexer.py',143),
  ('argumentList -> <empty>','argumentList',0,'p_argumentList','lexer.py',144),
  ('instruction -> assigment','instruction',1,'p_instruction','lexer.py',156),
  ('instruction -> return','instruction',1,'p_instruction','lexer.py',157),
  ('instruction -> condition','instruction',1,'p_instruction','lexer.py',158),
  ('instruction -> loop','instruction',1,'p_instruction','lexer.py',159),
  ('instruction -> <empty>','instruction',0,'p_instruction','lexer.py',160),
  ('instruction -> assigment instruction','instruction',2,'p_instruction','lexer.py',161),
  ('instruction -> return instruction','instruction',2,'p_instruction','lexer.py',162),
  ('instruction -> condition instruction','instruction',2,'p_instruction','lexer.py',163),
  ('instruction -> loop instruction','instruction',2,'p_instruction','lexer.py',164),
  ('infinstruction -> infinstruction instruction','infinstruction',2,'p_infinstruction','lexer.py',173),
  ('infinstruction -> instruction','infinstruction',1,'p_infinstruction','lexer.py',174),
  ('assigment -> IDENT ASSIGN arExpression','assigment',3,'p_assigment','lexer.py',183),
  ('return -> RETURN arExpression','return',2,'p_return','lexer.py',189),
  ('condition -> IF arExpression L_BRACE instruction R_BRACE','condition',5,'p_condition','lexer.py',195),
  ('condition -> IF arExpression L_BRACE instruction R_BRACE ELSE L_BRACE instruction R_BRACE','condition',9,'p_condition','lexer.py',196),
  ('loop -> WHILE arExpression L_BRACE instruction R_BRACE','loop',5,'p_loop','lexer.py',202),
  ('arExpression -> disjunct','arExpression',1,'p_arExpression','lexer.py',211),
  ('arExpression -> disjunct OR arExpression','arExpression',3,'p_arExpression','lexer.py',212),
  ('disjunct -> conjunct','disjunct',1,'p_disjunct','lexer.py',221),
  ('disjunct -> conjunct AND disjunct','disjunct',3,'p_disjunct','lexer.py',222),
  ('conjunct -> binaryExp','conjunct',1,'p_conjunct','lexer.py',231),
  ('conjunct -> binaryExp BIN_OP binaryExp','conjunct',3,'p_conjunct','lexer.py',232),
  ('binaryExp -> expression','binaryExp',1,'p_binaryExp','lexer.py',241),
  ('binaryExp -> NOT expression','binaryExp',2,'p_binaryExp','lexer.py',242),
  ('expression -> term','expression',1,'p_expression','lexer.py',251),
  ('expression -> expression PLUS term','expression',3,'p_expression','lexer.py',252),
  ('expression -> expression MINUS term','expression',3,'p_expression','lexer.py',253),
  ('term -> factor','term',1,'p_term','lexer.py',266),
  ('term -> term MUL_OP factor','term',3,'p_term','lexer.py',267),
  ('factor -> base','factor',1,'p_factor','lexer.py',281),
  ('factor -> MINUS factor','factor',2,'p_factor','lexer.py',282),
  ('factor -> base FACTOR factor','factor',3,'p_factor','lexer.py',283),
  ('base -> NUMBER','base',1,'p_base','lexer.py',294),
  ('base -> IDENT','base',1,'p_base','lexer.py',295),
  ('base -> L_BRACKET arExpression R_BRACKET','base',3,'p_base','lexer.py',296),
  ('base -> signature','base',1,'p_base','lexer.py',297),
]
